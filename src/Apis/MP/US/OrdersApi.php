<?php

/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\MP\US;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrdersApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'acknowledgeOrders' => 'application/json',
        'cancelOrderLines' => 'application/json',
        'getAllOrders' => 'application/json',
        'getAllReleasedOrders' => 'application/json',
        'getAnOrder' => 'application/json',
        'refundOrderLines' => 'application/json',
        'shippingUpdates' => 'application/json',
    ];

    /**
     * Operation acknowledgeOrders
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    public function acknowledgeOrders(
        string $purchaseOrderId
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        return $this->acknowledgeOrdersWithHttpInfo($purchaseOrderId);
    }

    /**
     * Operation acknowledgeOrdersWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    protected function acknowledgeOrdersWithHttpInfo(
        string $purchaseOrderId,
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\GetOrderResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\GetOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation acknowledgeOrdersAsync
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeOrdersAsync(
        string $purchaseOrderId
    ): PromiseInterface {
        return $this->acknowledgeOrdersAsyncWithHttpInfo($purchaseOrderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acknowledgeOrdersAsyncWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function acknowledgeOrdersAsyncWithHttpInfo(
        string $purchaseOrderId,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'acknowledgeOrders'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acknowledgeOrdersRequest(
        string $purchaseOrderId,
    ): Request {
        $contentType = self::contentTypes['acknowledgeOrders'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling acknowledgeOrders'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderLines
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    public function cancelOrderLines(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        return $this->cancelOrderLinesWithHttpInfo($purchaseOrderId, $orderCancellationResponse);
    }

    /**
     * Operation cancelOrderLinesWithHttpInfo
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    protected function cancelOrderLinesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse,
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $orderCancellationResponse);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\GetOrderResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\GetOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation cancelOrderLinesAsync
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderLinesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse
    ): PromiseInterface {
        return $this->cancelOrderLinesAsyncWithHttpInfo($purchaseOrderId, $orderCancellationResponse)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderLinesAsyncWithHttpInfo
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function cancelOrderLinesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $orderCancellationResponse);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderLines'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderLinesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderCancellationResponse $orderCancellationResponse,
    ): Request {
        $contentType = self::contentTypes['cancelOrderLines'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling cancelOrderLines'
            );
        }
        // verify the required parameter 'orderCancellationResponse' is set
        if ($orderCancellationResponse === null || (is_array($orderCancellationResponse) && count($orderCancellationResponse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderCancellationResponse when calling cancelOrderLines'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderCancellationResponse)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderCancellationResponse));
            } else {
                $httpBody = $orderCancellationResponse;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrders
     *
     * All orders
     *
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $lastModifiedStartDate Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $lastModifiedEndDate Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     * @param  string $hasMoreElements hasMoreElements (optional)
     * @param  string $soIndex Sales order index. This should only be populated from a next token (optional)
     * @param  string $poIndex Purchase order index. This should only be populated from a next token (optional)
     * @param  string $partnerId partnerId (optional)
     * @param  string $sellerId sellerId (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3
     */
    public function getAllOrders(
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $lastModifiedStartDate = null,
        ?string $lastModifiedEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
        ?string $hasMoreElements = null,
        ?string $soIndex = null,
        ?string $poIndex = null,
        ?string $partnerId = null,
        ?string $sellerId = null
    ): \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3 {
        return $this->getAllOrdersWithHttpInfo($sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $lastModifiedStartDate, $lastModifiedEndDate, $limit, $productInfo, $shipNodeType, $shippingProgramType, $replacementInfo, $orderType, $hasMoreElements, $soIndex, $poIndex, $partnerId, $sellerId);
    }

    /**
     * Operation getAllOrdersWithHttpInfo
     *
     * All orders
     *
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $lastModifiedStartDate Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $lastModifiedEndDate Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     * @param  string $hasMoreElements hasMoreElements (optional)
     * @param  string $soIndex Sales order index. This should only be populated from a next token (optional)
     * @param  string $poIndex Purchase order index. This should only be populated from a next token (optional)
     * @param  string $partnerId partnerId (optional)
     * @param  string $sellerId sellerId (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3
     */
    protected function getAllOrdersWithHttpInfo(
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $lastModifiedStartDate = null,
        ?string $lastModifiedEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
        ?string $hasMoreElements = null,
        ?string $soIndex = null,
        ?string $poIndex = null,
        ?string $partnerId = null,
        ?string $sellerId = null,
    ): \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3 {
        $request = $this->getAllOrdersRequest($sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $lastModifiedStartDate, $lastModifiedEndDate, $limit, $productInfo, $shipNodeType, $shippingProgramType, $replacementInfo, $orderType, $hasMoreElements, $soIndex, $poIndex, $partnerId, $sellerId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersAsync
     *
     * All orders
     *
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $lastModifiedStartDate Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $lastModifiedEndDate Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     * @param  string $hasMoreElements hasMoreElements (optional)
     * @param  string $soIndex Sales order index. This should only be populated from a next token (optional)
     * @param  string $poIndex Purchase order index. This should only be populated from a next token (optional)
     * @param  string $partnerId partnerId (optional)
     * @param  string $sellerId sellerId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsync(
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $lastModifiedStartDate = null,
        ?string $lastModifiedEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
        ?string $hasMoreElements = null,
        ?string $soIndex = null,
        ?string $poIndex = null,
        ?string $partnerId = null,
        ?string $sellerId = null
    ): PromiseInterface {
        return $this->getAllOrdersAsyncWithHttpInfo($sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $lastModifiedStartDate, $lastModifiedEndDate, $limit, $productInfo, $shipNodeType, $shippingProgramType, $replacementInfo, $orderType, $hasMoreElements, $soIndex, $poIndex, $partnerId, $sellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersAsyncWithHttpInfo
     *
     * All orders
     *
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $lastModifiedStartDate Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $lastModifiedEndDate Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     * @param  string $hasMoreElements hasMoreElements (optional)
     * @param  string $soIndex Sales order index. This should only be populated from a next token (optional)
     * @param  string $poIndex Purchase order index. This should only be populated from a next token (optional)
     * @param  string $partnerId partnerId (optional)
     * @param  string $sellerId sellerId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllOrdersAsyncWithHttpInfo(
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $lastModifiedStartDate = null,
        ?string $lastModifiedEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
        ?string $hasMoreElements = null,
        ?string $soIndex = null,
        ?string $poIndex = null,
        ?string $partnerId = null,
        ?string $sellerId = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3';
        $request = $this->getAllOrdersRequest($sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $lastModifiedStartDate, $lastModifiedEndDate, $limit, $productInfo, $shipNodeType, $shippingProgramType, $replacementInfo, $orderType, $hasMoreElements, $soIndex, $poIndex, $partnerId, $sellerId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrders'
     *
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $lastModifiedStartDate Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $lastModifiedEndDate Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     * @param  string $hasMoreElements hasMoreElements (optional)
     * @param  string $soIndex Sales order index. This should only be populated from a next token (optional)
     * @param  string $poIndex Purchase order index. This should only be populated from a next token (optional)
     * @param  string $partnerId partnerId (optional)
     * @param  string $sellerId sellerId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllOrdersRequest(
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $lastModifiedStartDate = null,
        ?string $lastModifiedEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
        ?string $hasMoreElements = null,
        ?string $soIndex = null,
        ?string $poIndex = null,
        ?string $partnerId = null,
        ?string $sellerId = null,
    ): Request {
        $contentType = self::contentTypes['getAllOrders'];

        $resourcePath = '/v3/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $sku,
                'sku', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $status,
                'status', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromExpectedShipDate,
                'fromExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $toExpectedShipDate,
                'toExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $lastModifiedStartDate,
                'lastModifiedStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $lastModifiedEndDate,
                'lastModifiedEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $shipNodeType,
                'shipNodeType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $shippingProgramType,
                'shippingProgramType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $replacementInfo,
                'replacementInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $orderType,
                'orderType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $hasMoreElements,
                'hasMoreElements', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $soIndex,
                'soIndex', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $poIndex,
                'poIndex', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $partnerId,
                'partnerId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $sellerId,
                'sellerId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllReleasedOrders
     *
     * All released orders
     *
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3
     */
    public function getAllReleasedOrders(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null
    ): \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3 {
        return $this->getAllReleasedOrdersWithHttpInfo($createdStartDate, $createdEndDate, $limit, $productInfo, $shipNodeType, $sku, $customerOrderId, $purchaseOrderId, $fromExpectedShipDate, $toExpectedShipDate, $shippingProgramType, $replacementInfo, $orderType);
    }

    /**
     * Operation getAllReleasedOrdersWithHttpInfo
     *
     * All released orders
     *
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3
     */
    protected function getAllReleasedOrdersWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
    ): \Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3 {
        $request = $this->getAllReleasedOrdersRequest($createdStartDate, $createdEndDate, $limit, $productInfo, $shipNodeType, $sku, $customerOrderId, $purchaseOrderId, $fromExpectedShipDate, $toExpectedShipDate, $shippingProgramType, $replacementInfo, $orderType);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllReleasedOrdersAsync
     *
     * All released orders
     *
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllReleasedOrdersAsync(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null
    ): PromiseInterface {
        return $this->getAllReleasedOrdersAsyncWithHttpInfo($createdStartDate, $createdEndDate, $limit, $productInfo, $shipNodeType, $sku, $customerOrderId, $purchaseOrderId, $fromExpectedShipDate, $toExpectedShipDate, $shippingProgramType, $replacementInfo, $orderType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllReleasedOrdersAsyncWithHttpInfo
     *
     * All released orders
     *
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllReleasedOrdersAsyncWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\PurchaseOrderTypeV3';
        $request = $this->getAllReleasedOrdersRequest($createdStartDate, $createdEndDate, $limit, $productInfo, $shipNodeType, $sku, $customerOrderId, $purchaseOrderId, $fromExpectedShipDate, $toExpectedShipDate, $shippingProgramType, $replacementInfo, $orderType);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllReleasedOrders'
     *
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $shipNodeType Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled. (optional, default to 'SellerFulfilled')
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $shippingProgramType Specifies the type of program. Allowed value is TWO_DAY. (optional)
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $orderType Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllReleasedOrdersRequest(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
        ?string $shipNodeType = 'SellerFulfilled',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $shippingProgramType = null,
        ?string $replacementInfo = 'false',
        ?string $orderType = null,
    ): Request {
        $contentType = self::contentTypes['getAllReleasedOrders'];

        $resourcePath = '/v3/orders/released';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $shipNodeType,
                'shipNodeType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $sku,
                'sku', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromExpectedShipDate,
                'fromExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $toExpectedShipDate,
                'toExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $shippingProgramType,
                'shippingProgramType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $replacementInfo,
                'replacementInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $orderType,
                'orderType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnOrder
     *
     * An order
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\Order
     */
    public function getAnOrder(
        string $purchaseOrderId,
        ?string $productInfo = 'false',
        ?string $replacementInfo = 'false'
    ): \Walmart\Models\MP\US\Orders\Order {
        return $this->getAnOrderWithHttpInfo($purchaseOrderId, $productInfo, $replacementInfo);
    }

    /**
     * Operation getAnOrderWithHttpInfo
     *
     * An order
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\Order
     */
    protected function getAnOrderWithHttpInfo(
        string $purchaseOrderId,
        ?string $productInfo = 'false',
        ?string $replacementInfo = 'false',
    ): \Walmart\Models\MP\US\Orders\Order {
        $request = $this->getAnOrderRequest($purchaseOrderId, $productInfo, $replacementInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content->order, '\Walmart\Models\MP\US\Orders\Order', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAnOrderAsync
     *
     * An order
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnOrderAsync(
        string $purchaseOrderId,
        ?string $productInfo = 'false',
        ?string $replacementInfo = 'false'
    ): PromiseInterface {
        return $this->getAnOrderAsyncWithHttpInfo($purchaseOrderId, $productInfo, $replacementInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnOrderAsyncWithHttpInfo
     *
     * An order
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAnOrderAsyncWithHttpInfo(
        string $purchaseOrderId,
        ?string $productInfo = 'false',
        ?string $replacementInfo = 'false',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\Order';
        $request = $this->getAnOrderRequest($purchaseOrderId, $productInfo, $replacementInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnOrder'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     * @param  string $replacementInfo Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAnOrderRequest(
        string $purchaseOrderId,
        ?string $productInfo = 'false',
        ?string $replacementInfo = 'false',
    ): Request {
        $contentType = self::contentTypes['getAnOrder'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling getAnOrder'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $replacementInfo,
                'replacementInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrderLines
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    public function refundOrderLines(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        return $this->refundOrderLinesWithHttpInfo($purchaseOrderId, $orderRefundJson);
    }

    /**
     * Operation refundOrderLinesWithHttpInfo
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    protected function refundOrderLinesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson,
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        $request = $this->refundOrderLinesRequest($purchaseOrderId, $orderRefundJson);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\GetOrderResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\GetOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation refundOrderLinesAsync
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderLinesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson
    ): PromiseInterface {
        return $this->refundOrderLinesAsyncWithHttpInfo($purchaseOrderId, $orderRefundJson)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderLinesAsyncWithHttpInfo
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function refundOrderLinesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
        $request = $this->refundOrderLinesRequest($purchaseOrderId, $orderRefundJson);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrderLines'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundOrderLinesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderRefundJson $orderRefundJson,
    ): Request {
        $contentType = self::contentTypes['refundOrderLines'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling refundOrderLines'
            );
        }
        // verify the required parameter 'orderRefundJson' is set
        if ($orderRefundJson === null || (is_array($orderRefundJson) && count($orderRefundJson) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderRefundJson when calling refundOrderLines'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderRefundJson)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderRefundJson));
            } else {
                $httpBody = $orderRefundJson;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shippingUpdates
     *
     * Ship Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    public function shippingUpdates(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        return $this->shippingUpdatesWithHttpInfo($purchaseOrderId, $orderShipment);
    }

    /**
     * Operation shippingUpdatesWithHttpInfo
     *
     * Ship Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Orders\GetOrderResponse
     */
    protected function shippingUpdatesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment,
    ): \Walmart\Models\MP\US\Orders\GetOrderResponse {
        $request = $this->shippingUpdatesRequest($purchaseOrderId, $orderShipment);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\US\Orders\GetOrderResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Orders\GetOrderResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Orders\GetOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation shippingUpdatesAsync
     *
     * Ship Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingUpdatesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment
    ): PromiseInterface {
        return $this->shippingUpdatesAsyncWithHttpInfo($purchaseOrderId, $orderShipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingUpdatesAsyncWithHttpInfo
     *
     * Ship Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function shippingUpdatesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Orders\GetOrderResponse';
        $request = $this->shippingUpdatesRequest($purchaseOrderId, $orderShipment);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingUpdates'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shippingUpdatesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\US\Orders\OrderShipment $orderShipment,
    ): Request {
        $contentType = self::contentTypes['shippingUpdates'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling shippingUpdates'
            );
        }
        // verify the required parameter 'orderShipment' is set
        if ($orderShipment === null || (is_array($orderShipment) && count($orderShipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderShipment when calling shippingUpdates'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/shipping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderShipment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderShipment));
            } else {
                $httpBody = $orderShipment;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

